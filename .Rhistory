return(beta_k_new)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(1, ncol = 1, nrow = 6)
ifelse(beta_k-beta_k_new <= 1e-10){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
?equivalent
ifelse(is.true(all.equal(beta_k-beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(1, ncol = 1, nrow = 6)
ifelse(is.true(all.equal(beta_k-beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(1, ncol = 1, nrow = 6)
ifelse(is.true(all.equal(beta_k-beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
if(is.true(all.equal(beta_k-beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(1, ncol = 1, nrow = 6)
if(isTRUE(all.equal(beta_k-beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(1, ncol = 1, nrow = 6)
if(isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
lm(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(1, ncol = 1, nrow = 6)
if(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(1, ncol = 1, nrow = 6)
if(isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}else{
return(beta_k_new)
}
}
return(beta_k_new)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(1, ncol = 1, nrow = 6)
while(isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
return(beta_k_new)
linear_model(Sepal.Length ~ ., iris)
lm(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(1, ncol = 1, nrow = 6)
while(isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
print(beta_k_new)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
print(beta_k_new)
}
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(1, ncol = 1, nrow = 6)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
print(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(18, ncol = 1, nrow = 6)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
print(beta_k_new)
}
return(beta_k_new)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(18, ncol = 1, nrow = 6)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
print(beta_k_new)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(18, ncol = 1, nrow = 6)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
print(beta_k_new)
}
F <- function(beta, Y, X){
drop(t(Y) %*%  Y + t(beta) %*% t(X) %*% X %*% beta - 2 *  t(Y) %*% X  %*% beta)
}
dF <- function(beta, Y, X){
(2 * t(X) %*%  X  %*% beta - 2 *  t(X) %*%  Y)
}
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = 6)
beta_k_new <- matrix(18, ncol = 1, nrow = 6)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
print(beta_k_new)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
lm(Sepal.Length ~ ., iris)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
print(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
lm(Sepal.Length ~ ., iris)
library(RCurl)
install.packages(RCurl)
install.packages("RCurl")
libraru(RCurl)
library(RCurl)
x <- getURL("https://github.com/BIS557/homework-1-cck42/blob/master/lm_patho.csv")
x <- getURL("https://raw.github.com/BIS557/homework-1-cck42/blob/master/lm_patho.csv")
?matrix
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = nrow(data))
beta_k_new <- matrix(18, ncol = 1, nrow = nrow(data))
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
F <- function(beta, Y, X){
drop(t(Y) %*%  Y + t(beta) %*% t(X) %*% X %*% beta - 2 *  t(Y) %*% X  %*% beta)
}
dF <- function(beta, Y, X){
(2 * t(X) %*%  X  %*% beta - 2 *  t(X) %*%  Y)
}
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = nrow(data))
beta_k_new <- matrix(18, ncol = 1, nrow = nrow(data))
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)-1)
beta_k_new <- matrix(18, ncol = 1, nrow = nrow(data)-1)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)-1)
beta_k_new <- matrix(18, ncol = 1, nrow = nrow(data)-1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = nrow(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
lm(Sepal.Length ~ ., iris)
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.000001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.000001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.00001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
lm(Sepal.Length ~ ., iris)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.00001 * dF(beta_k_new, Y, X)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
source('~/Documents/bis557/linearmodel/R/test_linear_model.R')
load(/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv)
load("/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv")
cd ~
ls
load("~/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv")
load(~/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv)
load(/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv)
getwd()
setwd(/Users/chaneykalinich/Documents/BIS557/linearmodel)
setwd("/Users/chaneykalinich/Documents/BIS557/linearmodel")
load("/homework-1-cck42/lm_patho.csv:)
load("/homework-1-cck42/lm_patho.csv")
read.csv("/homework-1-cck42/lm_patho.csv")
ls
getwd()
read.csv("/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv")
dat <- read.csv("/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv")
View(dat)
save(dat, file = "lm_patho.rda")
save(dat, file = "lm_patho.csv")
load("/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/test-linear-model.r")
data(lm_patho)
data(lm_patho)
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_linear_model <- linear_model(y ~., dat)
source('~/Documents/bis557/linearmodel/R/test_linear_model.R')
usethis::use_data_raw()
usethis::use_data("~/Documents/BIS557/homework-1-cck42/lm_patho.csv")
usethis::use_data(DATASET)
DATASET <- data("~/Documents/BIS557/homework-1-cck42/lm_patho.csv")
## code to prepare `DATASET` dataset goes here
##~/Documents/BIS557/homework-1-cck42/lm_patho.csv
DATASET <- data("~/Documents/BIS557/homework-1-cck42/lm_patho.csv")
## code to prepare `DATASET` dataset goes here
##~/Documents/BIS557/homework-1-cck42/lm_patho.csv
DATASET <- data(~/Documents/BIS557/homework-1-cck42/lm_patho.csv)
## code to prepare `DATASET` dataset goes here
##~/Documents/BIS557/homework-1-cck42/lm_patho.csv
DATASET <- data("~/Documents/BIS557/homework1/homework-1-cck42/lm_patho.csv")
usethis::use_data(DATASET)
## code to prepare `DATASET` dataset goes here
##~/Documents/BIS557/homework-1-cck42/lm_patho.csv
lm_patho <- data("~/Documents/BIS557/homework1/homework-1-cck42/lm_patho.csv")
usethis::use_data(DATASET)
lm_patho <- read.csv(~/Documents/BIS557/homework1/homework-1-cck42/lm_patho.csv)
lm_patho <- read.csv("~/Documents/BIS557/homework1/homework-1-cck42/lm_patho.csv")
pwd
save(lm_patho)
save(lm_patho.R)
save(lm_patho)
lm_patho <- read.csv(~/Documents/BIS557/homework1/homework-1-cck42/lm_patho.csv)
lm_patho <- read.csv("~/Documents/BIS557/homework1/homework-1-cck42/lm_patho.csv")
getwd()
save(/R/lm_patho)
save("/R/lm_patho")
save(lm_patho, file = ’file.Rdata’) R
save(lm_patho, file = ’file.Rdata’)
save(lm_patho, file = ’lm_patho.Rdata’)
save(lm_patho, file = "/R/lm_patho.Rdata")
