beta_k <- matrix(1, ncol = 1, nrow = nrow(data))
beta_k_new <- matrix(18, ncol = 1, nrow = nrow(data))
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
F <- function(beta, Y, X){
drop(t(Y) %*%  Y + t(beta) %*% t(X) %*% X %*% beta - 2 *  t(Y) %*% X  %*% beta)
}
dF <- function(beta, Y, X){
(2 * t(X) %*%  X  %*% beta - 2 *  t(X) %*%  Y)
}
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = nrow(data))
beta_k_new <- matrix(18, ncol = 1, nrow = nrow(data))
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)-1)
beta_k_new <- matrix(18, ncol = 1, nrow = nrow(data)-1)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)-1)
beta_k_new <- matrix(18, ncol = 1, nrow = nrow(data)-1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = nrow(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
lm(Sepal.Length ~ ., iris)
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.000001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.000001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.00001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
lm(Sepal.Length ~ ., iris)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-10))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.00001 * dF(beta_k_new, Y, X)
}
linear_model(Sepal.Length ~ ., iris)
linear_model <- function(form, data, constants = NULL){
if(!is.null(constants)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
print(beta_k)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-6))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(beta_k_new)
}
linear_model(Sepal.Length ~ ., iris)
source('~/Documents/bis557/linearmodel/R/test_linear_model.R')
load(/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv)
load("/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv")
cd ~
ls
load("~/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv")
load(~/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv)
load(/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv)
getwd()
setwd(/Users/chaneykalinich/Documents/BIS557/linearmodel)
setwd("/Users/chaneykalinich/Documents/BIS557/linearmodel")
load("/homework-1-cck42/lm_patho.csv:)
load("/homework-1-cck42/lm_patho.csv")
read.csv("/homework-1-cck42/lm_patho.csv")
ls
getwd()
read.csv("/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv")
dat <- read.csv("/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/lm_patho.csv")
View(dat)
save(dat, file = "lm_patho.rda")
save(dat, file = "lm_patho.csv")
load("/Users/chaneykalinich/Documents/bis557/linearmodel/homework-1-cck42/test-linear-model.r")
data(lm_patho)
data(lm_patho)
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_linear_model <- linear_model(y ~., dat)
source('~/Documents/bis557/linearmodel/R/test_linear_model.R')
devtools::create("~/Documents/BIS557/linearmodel")
devtools::create("~/Documents/BIS557/linearmodel")
usethis::use_testthat()
lm_patho <- read.csv("~/Documents/bis557/homework1/homework-1-cck42/lm_patho.csv")
library(devtools)
?use_data
use_data(lm_patho)
use_data_raw(lm_patho)
use_data_raw("lm_patho")
use_testthat()
?use_test
use_test("/Users/chaneykalinich/Documents/BIS557/homework1/homework-1-cck42/test-linear-model.r")
use_test(/Users/chaneykalinich/Documents/BIS557/homework1/homework-1-cck42/test-linear-model.r)
use_test("test-linear-model.r")
use_test()
test_that()
?test_that
library(testthat)
library(linearmodel)
test_check("linearmodel")
linear_model <- function(form, data, consts = NULL){
if(!is.null(consts)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data)
Y <- matrix(data[,1],ncol = 1)
colnames(Y) <- "Sepal.Length"
#solve directly
beta <- solve( t(X) %*% X ) %*% t(X) %*% Y
#change into list
return(list(coefficients = beta))
}
library(testthat)
library(linearmodel)
test_check("linearmodel")
library(testthat)
library(linear_model)
library(linearmodel)
library(testthat)
library(linearmodel)
test_check("linear_model")
test_check("linearmodel")
?test
test()
test()
?model.matrix
linear_model <- function(form, data, consts = NULL){
if(!is.null(consts)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data,  consts)
Y <- matrix(data[,1],ncol = 1)
colnames(Y) <- "Sepal.Length"
#solve directly
beta <- solve( t(X) %*% X ) %*% t(X) %*% Y
#change into list
return(list(coefficients = beta))
}
test()
linear_model <- function(form, data, consts = NULL){
if(!is.null(consts)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data,  contrasts.arg = consts)
Y <- matrix(data[,1],ncol = 1)
colnames(Y) <- "Sepal.Length"
#solve directly
beta <- solve( t(X) %*% X ) %*% t(X) %*% Y
#change into list
return(list(coefficients = beta))
}
data(iris)
fit_linear_model <- linear_model(Sepal.Length ~ ., iris,
contrasts = list(Species = "contr.sum"))
linear_model <- function(form, data, contrasts = NULL){
if(!is.null(consts)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data,  contrasts.arg = consts)
Y <- matrix(data[,1],ncol = 1)
colnames(Y) <- "Sepal.Length"
#solve directly
beta <- solve( t(X) %*% X ) %*% t(X) %*% Y
#change into list
return(list(coefficients = beta))
}
fit_linear_model <- linear_model(Sepal.Length ~ ., iris,
contrasts = list(Species = "contr.sum"))
linear_model <- function(form, data, contrasts = NULL){
if(!is.null(consts)){
#however you want to deal with the factor levels
}
#Make a model matrix
X <- model.matrix(form, data,  contrasts.arg = contrasts)
Y <- matrix(data[,1],ncol = 1)
colnames(Y) <- "Sepal.Length"
#solve directly
beta <- solve( t(X) %*% X ) %*% t(X) %*% Y
#change into list
return(list(coefficients = beta))
}
fit_linear_model <- linear_model(Sepal.Length ~ ., iris,
contrasts = list(Species = "contr.sum"))
linear_model <- function(form, data, contrasts = NULL){
#Make a model matrix
X <- model.matrix(form, data,  contrasts.arg = contrasts)
Y <- matrix(data[,1],ncol = 1)
colnames(Y) <- "Sepal.Length"
#solve directly
beta <- solve( t(X) %*% X ) %*% t(X) %*% Y
#change into list
return(list(coefficients = beta))
}
fit_linear_model <- linear_model(Sepal.Length ~ ., iris,
contrasts = list(Species = "contr.sum"))
fit_lm <- lm(Sepal.Length  ~ ., iris, contrasts = list(Species = "contr.sum"))
data(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
linear_model2(y~.,lm_patho)
F <- function(beta, Y, X){
drop(t(Y) %*%  Y + t(beta) %*% t(X) %*% X %*% beta - 2 *  t(Y) %*% X  %*% beta)
}
#formula for the gradient
dF <- function(beta, Y, X){
(2 * t(X) %*%  X  %*% beta - 2 *  t(X) %*%  Y)
}
linear_model2 <- function(form, data, contrasts = NULL){
#Make a model matrix
X <- model.matrix(form, data, contrasts.arg = contrasts)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-12))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(list(coefficients = c(beta_k_new[1:(ncol(data)+1)]))
}
linear_model2(y~.,lm_patho)
linear_model2 <- function(form, data, contrasts = NULL){
#Make a model matrix
X <- model.matrix(form, data, contrasts.arg = contrasts)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-12))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(list(coefficients = c(beta_k_new[1:(ncol(data)+1)]))
}
linear_model2 <- function(form, data, contrasts = NULL){
#Make a model matrix
X <- model.matrix(form, data, contrasts.arg = contrasts)
Y <- matrix(data[,1],ncol = 1)
beta_k <- matrix(1, ncol = 1, nrow = ncol(data)+1)
beta_k_new <- matrix(18, ncol = 1, nrow = ncol(data)+1)
while(!isTRUE(all.equal(beta_k, beta_k_new, tolerance = 1e-12))){
beta_k <- beta_k_new
F(beta_k_new, Y, X)
beta_k_new <- beta_k -  0.0001 * dF(beta_k_new, Y, X)
}
return(list(coefficients = beta_k_new))
}
linear_model2(y~.,lm_patho)
linear_model2(y~.,lm_patho)
load("~/Documents/BIS557/linearmodel/data/lm_patho.rda")
View(lm_patho)
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
View(fit_lm)
linear_model <- function(form, data, contrasts = NULL){
#Make a model matrix
X <- model.matrix(form, data,  contrasts.arg = contrasts)
Y <- matrix(data[,1],ncol = 1)
colnames(Y) <- "Sepal.Length"
if(ncol(data)>nrow(data)){
beta[,ncol(data)+1] <- NA
}
#solve directly
beta <- solve( t(X) %*% X ) %*% t(X) %*% Y
#change into list
return(list(coefficients = beta))
}
fit_linear_model <- linear_model(y ~., lm_patho)
X <- model.matrix(form, data,  contrasts.arg = contrasts)
form <- Sepal.Length ~ ., iris
X <- model.matrix(Sepal.Length ~ ., iris)
Y <- matrix(iris[,1],ncol = 1)
beta <- solve( t(X) %*% X ) %*% t(X) %*% Y
typeof(beta)
View(beta)
linear_model <- function(form, data, contrasts = NULL){
#Make a model matrix
X <- model.matrix(form, data,  contrasts.arg = contrasts)
Y <- matrix(data[,1],ncol = 1)
colnames(Y) <- "Sepal.Length"
if(ncol(data)>nrow(data)){
beta[ncol(data)+1] <- NA
}
#solve directly
beta <- solve( t(X) %*% X ) %*% t(X) %*% Y
#change into list
return(list(coefficients = beta))
}
fit_linear_model <- linear_model(Sepal.Length ~ ., iris)
fit_linear_model <- linear_model(y ~., lm_patho)
X <- model.matrix(y ~., lm_patho)
Y <- matrix(lm_patho[,1],ncol = 1)
Y <- matrix(data[,1],ncol = 1)
Y <- matrix(lm_patho[,1],ncol = 1)
if(ncol(data)>nrow(data)){
beta[ncol(data)+1] <- NA
}
beta <- double(ncol(data)+1)
beta <- double(length = ncol(data)+1)
beta <- double(length = ncol(lm_patho)+1)
if(ncol(data)>nrow(data)){
beta[ncol(data)+1] <- NA
}
beta <- double(length = ncol(lm_patho)+1)
if(ncol(lm_patho)>nrow(lm_patho)){
beta[ncol(lm_patho)+1] <- NA
}
#solve directly
beta <- solve( t(X) %*% X ) %*% t(X) %*% Y
beta
solve( t(X) %*% X )
t(X)
X
t(X) %*% X
s<-t(X) %*% X
solve(s)
linear_model <- function(form, data, contrasts = NULL){
#Make a model matrix
X <- model.matrix(form, data,  contrasts.arg = contrasts)
Y <- matrix(data[,1],ncol = 1)
if(ncol(data)>nrow(data)){
beta[ncol(data)+1] <- NA
}
#solve directly
beta <- solve( t(X) %*% X, diag(ncol(X)),1e-36 ) %*% t(X) %*% Y
#change into list
return(list(coefficients = beta))
}
fit_linear_model <- linear_model(y ~., lm_patho)
fit_lm <- lm(y ~., lm_patho)
View(fit_lm)
View(fit_lm)
library(testthat)
library(linearmodel)
test_check("linearmodel")
pwd()
linear_model <- function(form, data, contrasts = NULL){
#Make a model matrix
X <- model.matrix(form, data,  contrasts.arg = contrasts)
Y <- matrix(data[,1],ncol = 1)
#solve directly
beta <- solve( t(X) %*% X, diag(ncol(X)),1e-36 ) %*% t(X) %*% Y
#change into list
return(list(coefficients = beta))
}
library(linearmodel)
?linear_model
data(iris)
fit_linear_model <- linear_model(Sepal.Length ~ ., iris)
View(fit_linear_model)
?lm_patho
devtools::document()
?linear_model
devtools::document()
?linear_model
?linear_model2
??linear_model2
roxygen2::roxygenise()
devtools::document()
?linear_model2
